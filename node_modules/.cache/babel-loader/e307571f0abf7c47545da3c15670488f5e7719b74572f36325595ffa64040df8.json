{"ast":null,"code":"var _jsxFileName = \"/home/abc/Documents/alit-task/Test-Alit-Technologies/src/App/components/common/Dropdown.jsx\";\nimport React from \"react\";\nimport Select from \"react-select\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Dropdown = props => {\n  const {\n    placeholder,\n    options,\n    selectedOption,\n    setSelectedOption,\n    valueText,\n    labelText,\n    error,\n    focus,\n    boxClass,\n    className,\n    classNamePrefix,\n    isMulti = false,\n    formatOptionLabel = {},\n    isClearable = false,\n    isSearchable = false,\n    hideIndicator = false\n  } = props;\n  const invalid = !!(focus && error);\n  const valid = !!(focus && !error);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dropdown_select\",\n    children: [/*#__PURE__*/_jsxDEV(Select, {\n      formatOptionLabel: formatOptionLabel,\n      components: hideIndicator ? {\n        DropdownIndicator: () => null,\n        IndicatorSeparator: () => null\n      } : false,\n      isMulti: isMulti,\n      className: className + \" \" + 'selec_dropdown',\n      isClearable: isClearable,\n      isSearchable: isSearchable,\n      classNamePrefix: classNamePrefix,\n      value: typeof selectedOption === \"object\" ? selectedOption : options === null || options === void 0 ? void 0 : options.find(item => item[valueText] === selectedOption),\n      onChange: setSelectedOption,\n      options: valueText === \"value\" && labelText === \"label\" ? options : options === null || options === void 0 ? void 0 : options.map(item => ({\n        value: item[valueText],\n        label: item[labelText],\n        data: item\n      })),\n      placeholder: placeholder\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"input_drop_error\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n};\n_c = Dropdown;\nexport default Dropdown;\nvar _c;\n$RefreshReg$(_c, \"Dropdown\");","map":{"version":3,"names":["React","Select","jsxDEV","_jsxDEV","Dropdown","props","placeholder","options","selectedOption","setSelectedOption","valueText","labelText","error","focus","boxClass","className","classNamePrefix","isMulti","formatOptionLabel","isClearable","isSearchable","hideIndicator","invalid","valid","children","components","DropdownIndicator","IndicatorSeparator","value","find","item","onChange","map","label","data","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/abc/Documents/alit-task/Test-Alit-Technologies/src/App/components/common/Dropdown.jsx"],"sourcesContent":["import React from \"react\";\nimport Select from \"react-select\";\n\nconst Dropdown = (props) => {\n  const {\n    placeholder,\n    options,\n    selectedOption,\n    setSelectedOption,\n    valueText,\n    labelText,\n    error,\n    focus,\n    boxClass,\n    className,\n    classNamePrefix,\n    isMulti = false,\n    formatOptionLabel={},\n    isClearable = false,\n    isSearchable = false,\n    hideIndicator = false,\n  } = props;\n  const invalid = !!(focus && error);\n  const valid = !!(focus && !error);\n\n  return (\n    <div className='dropdown_select'>\n      <Select\n        formatOptionLabel={formatOptionLabel}\n        components={hideIndicator ? { DropdownIndicator: () => null, IndicatorSeparator: () => null } : false}\n        isMulti={isMulti}\n        className={className + \" \" + 'selec_dropdown'}\n        isClearable={isClearable}\n        isSearchable={isSearchable}\n        classNamePrefix={classNamePrefix}\n        value={\n          typeof selectedOption === \"object\"\n            ? selectedOption\n            : options?.find((item) => item[valueText] === selectedOption)\n        }\n        onChange={setSelectedOption}\n        options={\n          valueText === \"value\" && labelText === \"label\"\n            ? options\n            : options?.map((item) => ({\n              value: item[valueText],\n              label: item[labelText],\n              data: item,\n            }))\n        }\n        placeholder={placeholder}\n      />\n      {error && (\n        <p className=\"input_drop_error\">\n          {error}\n        </p>\n      )}\n    </div>\n  );\n};\n\nexport default Dropdown;\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,MAAM,MAAM,cAAc;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElC,MAAMC,QAAQ,GAAIC,KAAK,IAAK;EAC1B,MAAM;IACJC,WAAW;IACXC,OAAO;IACPC,cAAc;IACdC,iBAAiB;IACjBC,SAAS;IACTC,SAAS;IACTC,KAAK;IACLC,KAAK;IACLC,QAAQ;IACRC,SAAS;IACTC,eAAe;IACfC,OAAO,GAAG,KAAK;IACfC,iBAAiB,GAAC,CAAC,CAAC;IACpBC,WAAW,GAAG,KAAK;IACnBC,YAAY,GAAG,KAAK;IACpBC,aAAa,GAAG;EAClB,CAAC,GAAGhB,KAAK;EACT,MAAMiB,OAAO,GAAG,CAAC,EAAET,KAAK,IAAID,KAAK,CAAC;EAClC,MAAMW,KAAK,GAAG,CAAC,EAAEV,KAAK,IAAI,CAACD,KAAK,CAAC;EAEjC,oBACET,OAAA;IAAKY,SAAS,EAAC,iBAAiB;IAAAS,QAAA,gBAC9BrB,OAAA,CAACF,MAAM;MACLiB,iBAAiB,EAAEA,iBAAkB;MACrCO,UAAU,EAAEJ,aAAa,GAAG;QAAEK,iBAAiB,EAAEA,CAAA,KAAM,IAAI;QAAEC,kBAAkB,EAAEA,CAAA,KAAM;MAAK,CAAC,GAAG,KAAM;MACtGV,OAAO,EAAEA,OAAQ;MACjBF,SAAS,EAAEA,SAAS,GAAG,GAAG,GAAG,gBAAiB;MAC9CI,WAAW,EAAEA,WAAY;MACzBC,YAAY,EAAEA,YAAa;MAC3BJ,eAAe,EAAEA,eAAgB;MACjCY,KAAK,EACH,OAAOpB,cAAc,KAAK,QAAQ,GAC9BA,cAAc,GACdD,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEsB,IAAI,CAAEC,IAAI,IAAKA,IAAI,CAACpB,SAAS,CAAC,KAAKF,cAAc,CAC/D;MACDuB,QAAQ,EAAEtB,iBAAkB;MAC5BF,OAAO,EACLG,SAAS,KAAK,OAAO,IAAIC,SAAS,KAAK,OAAO,GAC1CJ,OAAO,GACPA,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEyB,GAAG,CAAEF,IAAI,KAAM;QACxBF,KAAK,EAAEE,IAAI,CAACpB,SAAS,CAAC;QACtBuB,KAAK,EAAEH,IAAI,CAACnB,SAAS,CAAC;QACtBuB,IAAI,EAAEJ;MACR,CAAC,CAAC,CACL;MACDxB,WAAW,EAAEA;IAAY;MAAA6B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC1B,CAAC,EACD1B,KAAK,iBACJT,OAAA;MAAGY,SAAS,EAAC,kBAAkB;MAAAS,QAAA,EAC5BZ;IAAK;MAAAuB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL,CACJ;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAACC,EAAA,GAxDInC,QAAQ;AA0Dd,eAAeA,QAAQ;AAAC,IAAAmC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}